/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace sg.protocol.basic
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Error : TBase
  {
    private bool _is_success;
    private int _err_code;
    private string _err_message;
    private bool _is_debug;

    public bool Is_success
    {
      get
      {
        return _is_success;
      }
      set
      {
        __isset.is_success = true;
        this._is_success = value;
      }
    }

    public int Err_code
    {
      get
      {
        return _err_code;
      }
      set
      {
        __isset.err_code = true;
        this._err_code = value;
      }
    }

    public string Err_message
    {
      get
      {
        return _err_message;
      }
      set
      {
        __isset.err_message = true;
        this._err_message = value;
      }
    }

    public bool Is_debug
    {
      get
      {
        return _is_debug;
      }
      set
      {
        __isset.is_debug = true;
        this._is_debug = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool is_success;
      public bool err_code;
      public bool err_message;
      public bool is_debug;
    }

    public Error() {
      this._is_success = true;
      this.__isset.is_success = true;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Bool) {
              Is_success = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Err_code = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Err_message = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Bool) {
              Is_debug = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Error");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.is_success) {
        field.Name = "is_success";
        field.Type = TType.Bool;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Is_success);
        oprot.WriteFieldEnd();
      }
      if (__isset.err_code) {
        field.Name = "err_code";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Err_code);
        oprot.WriteFieldEnd();
      }
      if (Err_message != null && __isset.err_message) {
        field.Name = "err_message";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Err_message);
        oprot.WriteFieldEnd();
      }
      if (__isset.is_debug) {
        field.Name = "is_debug";
        field.Type = TType.Bool;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Is_debug);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Error(");
      sb.Append("Is_success: ");
      sb.Append(Is_success);
      sb.Append(",Err_code: ");
      sb.Append(Err_code);
      sb.Append(",Err_message: ");
      sb.Append(Err_message);
      sb.Append(",Is_debug: ");
      sb.Append(Is_debug);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
