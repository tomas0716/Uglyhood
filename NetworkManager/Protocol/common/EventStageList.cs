/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace sg.protocol.common
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class EventStageList : TBase
  {
    private int _i_ModeId;
    private int _i_Difficulty;
    private int _i_StageId;
    private int _i_PassCountDaily;
    private int _i_FreeClearCount;
    private int _i_PaidClearCount;
    private int _i_PaidType;
    private int _i_PaidId;
    private int _i_PaidCount;

    public int I_ModeId
    {
      get
      {
        return _i_ModeId;
      }
      set
      {
        __isset.i_ModeId = true;
        this._i_ModeId = value;
      }
    }

    public int I_Difficulty
    {
      get
      {
        return _i_Difficulty;
      }
      set
      {
        __isset.i_Difficulty = true;
        this._i_Difficulty = value;
      }
    }

    public int I_StageId
    {
      get
      {
        return _i_StageId;
      }
      set
      {
        __isset.i_StageId = true;
        this._i_StageId = value;
      }
    }

    public int I_PassCountDaily
    {
      get
      {
        return _i_PassCountDaily;
      }
      set
      {
        __isset.i_PassCountDaily = true;
        this._i_PassCountDaily = value;
      }
    }

    public int I_FreeClearCount
    {
      get
      {
        return _i_FreeClearCount;
      }
      set
      {
        __isset.i_FreeClearCount = true;
        this._i_FreeClearCount = value;
      }
    }

    public int I_PaidClearCount
    {
      get
      {
        return _i_PaidClearCount;
      }
      set
      {
        __isset.i_PaidClearCount = true;
        this._i_PaidClearCount = value;
      }
    }

    public int I_PaidType
    {
      get
      {
        return _i_PaidType;
      }
      set
      {
        __isset.i_PaidType = true;
        this._i_PaidType = value;
      }
    }

    public int I_PaidId
    {
      get
      {
        return _i_PaidId;
      }
      set
      {
        __isset.i_PaidId = true;
        this._i_PaidId = value;
      }
    }

    public int I_PaidCount
    {
      get
      {
        return _i_PaidCount;
      }
      set
      {
        __isset.i_PaidCount = true;
        this._i_PaidCount = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool i_ModeId;
      public bool i_Difficulty;
      public bool i_StageId;
      public bool i_PassCountDaily;
      public bool i_FreeClearCount;
      public bool i_PaidClearCount;
      public bool i_PaidType;
      public bool i_PaidId;
      public bool i_PaidCount;
    }

    public EventStageList() {
      this._i_ModeId = 0;
      this.__isset.i_ModeId = true;
      this._i_Difficulty = 0;
      this.__isset.i_Difficulty = true;
      this._i_StageId = 0;
      this.__isset.i_StageId = true;
      this._i_PassCountDaily = 0;
      this.__isset.i_PassCountDaily = true;
      this._i_FreeClearCount = 0;
      this.__isset.i_FreeClearCount = true;
      this._i_PaidClearCount = 0;
      this.__isset.i_PaidClearCount = true;
      this._i_PaidType = 0;
      this.__isset.i_PaidType = true;
      this._i_PaidId = 0;
      this.__isset.i_PaidId = true;
      this._i_PaidCount = 0;
      this.__isset.i_PaidCount = true;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              I_ModeId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              I_Difficulty = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              I_StageId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              I_PassCountDaily = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              I_FreeClearCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              I_PaidClearCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              I_PaidType = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              I_PaidId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              I_PaidCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("EventStageList");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.i_ModeId) {
        field.Name = "i_ModeId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_ModeId);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_Difficulty) {
        field.Name = "i_Difficulty";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_Difficulty);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_StageId) {
        field.Name = "i_StageId";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_StageId);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_PassCountDaily) {
        field.Name = "i_PassCountDaily";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_PassCountDaily);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_FreeClearCount) {
        field.Name = "i_FreeClearCount";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_FreeClearCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_PaidClearCount) {
        field.Name = "i_PaidClearCount";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_PaidClearCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_PaidType) {
        field.Name = "i_PaidType";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_PaidType);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_PaidId) {
        field.Name = "i_PaidId";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_PaidId);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_PaidCount) {
        field.Name = "i_PaidCount";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_PaidCount);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("EventStageList(");
      sb.Append("I_ModeId: ");
      sb.Append(I_ModeId);
      sb.Append(",I_Difficulty: ");
      sb.Append(I_Difficulty);
      sb.Append(",I_StageId: ");
      sb.Append(I_StageId);
      sb.Append(",I_PassCountDaily: ");
      sb.Append(I_PassCountDaily);
      sb.Append(",I_FreeClearCount: ");
      sb.Append(I_FreeClearCount);
      sb.Append(",I_PaidClearCount: ");
      sb.Append(I_PaidClearCount);
      sb.Append(",I_PaidType: ");
      sb.Append(I_PaidType);
      sb.Append(",I_PaidId: ");
      sb.Append(I_PaidId);
      sb.Append(",I_PaidCount: ");
      sb.Append(I_PaidCount);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
