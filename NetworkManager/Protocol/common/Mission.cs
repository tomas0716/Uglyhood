/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace sg.protocol.common
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Mission : TBase
  {
    private int _i_MissionId;
    private string _s_MissionTitle;
    private string _s_MissionDescription;
    private string _s_MissionKind;
    private int _i_MissionCount;
    private int _i_Condition;
    private string _s_ConditionType;
    private string _s_ConditionDescription;

    public int I_MissionId
    {
      get
      {
        return _i_MissionId;
      }
      set
      {
        __isset.i_MissionId = true;
        this._i_MissionId = value;
      }
    }

    public string S_MissionTitle
    {
      get
      {
        return _s_MissionTitle;
      }
      set
      {
        __isset.s_MissionTitle = true;
        this._s_MissionTitle = value;
      }
    }

    public string S_MissionDescription
    {
      get
      {
        return _s_MissionDescription;
      }
      set
      {
        __isset.s_MissionDescription = true;
        this._s_MissionDescription = value;
      }
    }

    public string S_MissionKind
    {
      get
      {
        return _s_MissionKind;
      }
      set
      {
        __isset.s_MissionKind = true;
        this._s_MissionKind = value;
      }
    }

    public int I_MissionCount
    {
      get
      {
        return _i_MissionCount;
      }
      set
      {
        __isset.i_MissionCount = true;
        this._i_MissionCount = value;
      }
    }

    public int I_Condition
    {
      get
      {
        return _i_Condition;
      }
      set
      {
        __isset.i_Condition = true;
        this._i_Condition = value;
      }
    }

    public string S_ConditionType
    {
      get
      {
        return _s_ConditionType;
      }
      set
      {
        __isset.s_ConditionType = true;
        this._s_ConditionType = value;
      }
    }

    public string S_ConditionDescription
    {
      get
      {
        return _s_ConditionDescription;
      }
      set
      {
        __isset.s_ConditionDescription = true;
        this._s_ConditionDescription = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool i_MissionId;
      public bool s_MissionTitle;
      public bool s_MissionDescription;
      public bool s_MissionKind;
      public bool i_MissionCount;
      public bool i_Condition;
      public bool s_ConditionType;
      public bool s_ConditionDescription;
    }

    public Mission() {
      this._i_MissionId = 0;
      this.__isset.i_MissionId = true;
      this._s_MissionTitle = "";
      this.__isset.s_MissionTitle = true;
      this._s_MissionDescription = "";
      this.__isset.s_MissionDescription = true;
      this._s_MissionKind = "";
      this.__isset.s_MissionKind = true;
      this._i_MissionCount = 0;
      this.__isset.i_MissionCount = true;
      this._i_Condition = 0;
      this.__isset.i_Condition = true;
      this._s_ConditionType = "";
      this.__isset.s_ConditionType = true;
      this._s_ConditionDescription = "";
      this.__isset.s_ConditionDescription = true;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              I_MissionId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              S_MissionTitle = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              S_MissionDescription = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              S_MissionKind = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              I_MissionCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              I_Condition = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              S_ConditionType = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              S_ConditionDescription = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Mission");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.i_MissionId) {
        field.Name = "i_MissionId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_MissionId);
        oprot.WriteFieldEnd();
      }
      if (S_MissionTitle != null && __isset.s_MissionTitle) {
        field.Name = "s_MissionTitle";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(S_MissionTitle);
        oprot.WriteFieldEnd();
      }
      if (S_MissionDescription != null && __isset.s_MissionDescription) {
        field.Name = "s_MissionDescription";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(S_MissionDescription);
        oprot.WriteFieldEnd();
      }
      if (S_MissionKind != null && __isset.s_MissionKind) {
        field.Name = "s_MissionKind";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(S_MissionKind);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_MissionCount) {
        field.Name = "i_MissionCount";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_MissionCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_Condition) {
        field.Name = "i_Condition";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_Condition);
        oprot.WriteFieldEnd();
      }
      if (S_ConditionType != null && __isset.s_ConditionType) {
        field.Name = "s_ConditionType";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(S_ConditionType);
        oprot.WriteFieldEnd();
      }
      if (S_ConditionDescription != null && __isset.s_ConditionDescription) {
        field.Name = "s_ConditionDescription";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(S_ConditionDescription);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Mission(");
      sb.Append("I_MissionId: ");
      sb.Append(I_MissionId);
      sb.Append(",S_MissionTitle: ");
      sb.Append(S_MissionTitle);
      sb.Append(",S_MissionDescription: ");
      sb.Append(S_MissionDescription);
      sb.Append(",S_MissionKind: ");
      sb.Append(S_MissionKind);
      sb.Append(",I_MissionCount: ");
      sb.Append(I_MissionCount);
      sb.Append(",I_Condition: ");
      sb.Append(I_Condition);
      sb.Append(",S_ConditionType: ");
      sb.Append(S_ConditionType);
      sb.Append(",S_ConditionDescription: ");
      sb.Append(S_ConditionDescription);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
