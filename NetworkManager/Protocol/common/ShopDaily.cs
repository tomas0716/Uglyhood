/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace sg.protocol.common
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ShopDaily : TBase
  {
    private int _i_Id;
    private int _i_PaymentType;
    private string _s_PaymentId;
    private int _i_PaymentQty;
    private int _i_ProductType;
    private int _i_ProductId;
    private int _i_ProductQty;
    private int _i_IsBuy;

    public int I_Id
    {
      get
      {
        return _i_Id;
      }
      set
      {
        __isset.i_Id = true;
        this._i_Id = value;
      }
    }

    public int I_PaymentType
    {
      get
      {
        return _i_PaymentType;
      }
      set
      {
        __isset.i_PaymentType = true;
        this._i_PaymentType = value;
      }
    }

    public string S_PaymentId
    {
      get
      {
        return _s_PaymentId;
      }
      set
      {
        __isset.s_PaymentId = true;
        this._s_PaymentId = value;
      }
    }

    public int I_PaymentQty
    {
      get
      {
        return _i_PaymentQty;
      }
      set
      {
        __isset.i_PaymentQty = true;
        this._i_PaymentQty = value;
      }
    }

    public int I_ProductType
    {
      get
      {
        return _i_ProductType;
      }
      set
      {
        __isset.i_ProductType = true;
        this._i_ProductType = value;
      }
    }

    public int I_ProductId
    {
      get
      {
        return _i_ProductId;
      }
      set
      {
        __isset.i_ProductId = true;
        this._i_ProductId = value;
      }
    }

    public int I_ProductQty
    {
      get
      {
        return _i_ProductQty;
      }
      set
      {
        __isset.i_ProductQty = true;
        this._i_ProductQty = value;
      }
    }

    public int I_IsBuy
    {
      get
      {
        return _i_IsBuy;
      }
      set
      {
        __isset.i_IsBuy = true;
        this._i_IsBuy = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool i_Id;
      public bool i_PaymentType;
      public bool s_PaymentId;
      public bool i_PaymentQty;
      public bool i_ProductType;
      public bool i_ProductId;
      public bool i_ProductQty;
      public bool i_IsBuy;
    }

    public ShopDaily() {
      this._i_Id = 0;
      this.__isset.i_Id = true;
      this._i_PaymentType = 0;
      this.__isset.i_PaymentType = true;
      this._s_PaymentId = "";
      this.__isset.s_PaymentId = true;
      this._i_PaymentQty = 0;
      this.__isset.i_PaymentQty = true;
      this._i_ProductType = 0;
      this.__isset.i_ProductType = true;
      this._i_ProductId = 0;
      this.__isset.i_ProductId = true;
      this._i_ProductQty = 0;
      this.__isset.i_ProductQty = true;
      this._i_IsBuy = 0;
      this.__isset.i_IsBuy = true;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              I_Id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              I_PaymentType = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              S_PaymentId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              I_PaymentQty = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              I_ProductType = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              I_ProductId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              I_ProductQty = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              I_IsBuy = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ShopDaily");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.i_Id) {
        field.Name = "i_Id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_Id);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_PaymentType) {
        field.Name = "i_PaymentType";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_PaymentType);
        oprot.WriteFieldEnd();
      }
      if (S_PaymentId != null && __isset.s_PaymentId) {
        field.Name = "s_PaymentId";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(S_PaymentId);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_PaymentQty) {
        field.Name = "i_PaymentQty";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_PaymentQty);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_ProductType) {
        field.Name = "i_ProductType";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_ProductType);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_ProductId) {
        field.Name = "i_ProductId";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_ProductId);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_ProductQty) {
        field.Name = "i_ProductQty";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_ProductQty);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_IsBuy) {
        field.Name = "i_IsBuy";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_IsBuy);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ShopDaily(");
      sb.Append("I_Id: ");
      sb.Append(I_Id);
      sb.Append(",I_PaymentType: ");
      sb.Append(I_PaymentType);
      sb.Append(",S_PaymentId: ");
      sb.Append(S_PaymentId);
      sb.Append(",I_PaymentQty: ");
      sb.Append(I_PaymentQty);
      sb.Append(",I_ProductType: ");
      sb.Append(I_ProductType);
      sb.Append(",I_ProductId: ");
      sb.Append(I_ProductId);
      sb.Append(",I_ProductQty: ");
      sb.Append(I_ProductQty);
      sb.Append(",I_IsBuy: ");
      sb.Append(I_IsBuy);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
