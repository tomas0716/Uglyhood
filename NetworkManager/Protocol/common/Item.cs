/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace sg.protocol.common
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Item : TBase
  {
    private int _i_ItemId;
    private string _s_ItemName;
    private string _s_ItemKind;
    private string _s_ItemGrade;
    private string _s_ItemDescription;
    private string _s_SlotPosition;
    private bool _b_IsShow;
    private int _i_Priority;
    private int _i_ItemEffectQuantity;
    private int _i_SalePrice;
    private string _s_UseItemKind;
    private string _s_MoneyKind;
    private string _s_BindYN;
    private int _i_BindID;
    private string _s_ImageName;

    public int I_ItemId
    {
      get
      {
        return _i_ItemId;
      }
      set
      {
        __isset.i_ItemId = true;
        this._i_ItemId = value;
      }
    }

    public string S_ItemName
    {
      get
      {
        return _s_ItemName;
      }
      set
      {
        __isset.s_ItemName = true;
        this._s_ItemName = value;
      }
    }

    public string S_ItemKind
    {
      get
      {
        return _s_ItemKind;
      }
      set
      {
        __isset.s_ItemKind = true;
        this._s_ItemKind = value;
      }
    }

    public string S_ItemGrade
    {
      get
      {
        return _s_ItemGrade;
      }
      set
      {
        __isset.s_ItemGrade = true;
        this._s_ItemGrade = value;
      }
    }

    public string S_ItemDescription
    {
      get
      {
        return _s_ItemDescription;
      }
      set
      {
        __isset.s_ItemDescription = true;
        this._s_ItemDescription = value;
      }
    }

    public string S_SlotPosition
    {
      get
      {
        return _s_SlotPosition;
      }
      set
      {
        __isset.s_SlotPosition = true;
        this._s_SlotPosition = value;
      }
    }

    public bool B_IsShow
    {
      get
      {
        return _b_IsShow;
      }
      set
      {
        __isset.b_IsShow = true;
        this._b_IsShow = value;
      }
    }

    public int I_Priority
    {
      get
      {
        return _i_Priority;
      }
      set
      {
        __isset.i_Priority = true;
        this._i_Priority = value;
      }
    }

    public int I_ItemEffectQuantity
    {
      get
      {
        return _i_ItemEffectQuantity;
      }
      set
      {
        __isset.i_ItemEffectQuantity = true;
        this._i_ItemEffectQuantity = value;
      }
    }

    public int I_SalePrice
    {
      get
      {
        return _i_SalePrice;
      }
      set
      {
        __isset.i_SalePrice = true;
        this._i_SalePrice = value;
      }
    }

    public string S_UseItemKind
    {
      get
      {
        return _s_UseItemKind;
      }
      set
      {
        __isset.s_UseItemKind = true;
        this._s_UseItemKind = value;
      }
    }

    public string S_MoneyKind
    {
      get
      {
        return _s_MoneyKind;
      }
      set
      {
        __isset.s_MoneyKind = true;
        this._s_MoneyKind = value;
      }
    }

    public string S_BindYN
    {
      get
      {
        return _s_BindYN;
      }
      set
      {
        __isset.s_BindYN = true;
        this._s_BindYN = value;
      }
    }

    public int I_BindID
    {
      get
      {
        return _i_BindID;
      }
      set
      {
        __isset.i_BindID = true;
        this._i_BindID = value;
      }
    }

    public string S_ImageName
    {
      get
      {
        return _s_ImageName;
      }
      set
      {
        __isset.s_ImageName = true;
        this._s_ImageName = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool i_ItemId;
      public bool s_ItemName;
      public bool s_ItemKind;
      public bool s_ItemGrade;
      public bool s_ItemDescription;
      public bool s_SlotPosition;
      public bool b_IsShow;
      public bool i_Priority;
      public bool i_ItemEffectQuantity;
      public bool i_SalePrice;
      public bool s_UseItemKind;
      public bool s_MoneyKind;
      public bool s_BindYN;
      public bool i_BindID;
      public bool s_ImageName;
    }

    public Item() {
      this._i_ItemId = 0;
      this.__isset.i_ItemId = true;
      this._s_ItemName = "";
      this.__isset.s_ItemName = true;
      this._s_ItemKind = "";
      this.__isset.s_ItemKind = true;
      this._s_ItemGrade = "";
      this.__isset.s_ItemGrade = true;
      this._s_ItemDescription = "";
      this.__isset.s_ItemDescription = true;
      this._s_SlotPosition = "";
      this.__isset.s_SlotPosition = true;
      this._b_IsShow = false;
      this.__isset.b_IsShow = true;
      this._i_Priority = 0;
      this.__isset.i_Priority = true;
      this._i_ItemEffectQuantity = 0;
      this.__isset.i_ItemEffectQuantity = true;
      this._i_SalePrice = 0;
      this.__isset.i_SalePrice = true;
      this._s_UseItemKind = "";
      this.__isset.s_UseItemKind = true;
      this._s_MoneyKind = "";
      this.__isset.s_MoneyKind = true;
      this._s_BindYN = "";
      this.__isset.s_BindYN = true;
      this._i_BindID = 0;
      this.__isset.i_BindID = true;
      this._s_ImageName = "";
      this.__isset.s_ImageName = true;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              I_ItemId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              S_ItemName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              S_ItemKind = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              S_ItemGrade = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              S_ItemDescription = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              S_SlotPosition = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Bool) {
              B_IsShow = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              I_Priority = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              I_ItemEffectQuantity = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              I_SalePrice = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.String) {
              S_UseItemKind = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.String) {
              S_MoneyKind = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.String) {
              S_BindYN = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I32) {
              I_BindID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.String) {
              S_ImageName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Item");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.i_ItemId) {
        field.Name = "i_ItemId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_ItemId);
        oprot.WriteFieldEnd();
      }
      if (S_ItemName != null && __isset.s_ItemName) {
        field.Name = "s_ItemName";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(S_ItemName);
        oprot.WriteFieldEnd();
      }
      if (S_ItemKind != null && __isset.s_ItemKind) {
        field.Name = "s_ItemKind";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(S_ItemKind);
        oprot.WriteFieldEnd();
      }
      if (S_ItemGrade != null && __isset.s_ItemGrade) {
        field.Name = "s_ItemGrade";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(S_ItemGrade);
        oprot.WriteFieldEnd();
      }
      if (S_ItemDescription != null && __isset.s_ItemDescription) {
        field.Name = "s_ItemDescription";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(S_ItemDescription);
        oprot.WriteFieldEnd();
      }
      if (S_SlotPosition != null && __isset.s_SlotPosition) {
        field.Name = "s_SlotPosition";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(S_SlotPosition);
        oprot.WriteFieldEnd();
      }
      if (__isset.b_IsShow) {
        field.Name = "b_IsShow";
        field.Type = TType.Bool;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(B_IsShow);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_Priority) {
        field.Name = "i_Priority";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_Priority);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_ItemEffectQuantity) {
        field.Name = "i_ItemEffectQuantity";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_ItemEffectQuantity);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_SalePrice) {
        field.Name = "i_SalePrice";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_SalePrice);
        oprot.WriteFieldEnd();
      }
      if (S_UseItemKind != null && __isset.s_UseItemKind) {
        field.Name = "s_UseItemKind";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(S_UseItemKind);
        oprot.WriteFieldEnd();
      }
      if (S_MoneyKind != null && __isset.s_MoneyKind) {
        field.Name = "s_MoneyKind";
        field.Type = TType.String;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(S_MoneyKind);
        oprot.WriteFieldEnd();
      }
      if (S_BindYN != null && __isset.s_BindYN) {
        field.Name = "s_BindYN";
        field.Type = TType.String;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(S_BindYN);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_BindID) {
        field.Name = "i_BindID";
        field.Type = TType.I32;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_BindID);
        oprot.WriteFieldEnd();
      }
      if (S_ImageName != null && __isset.s_ImageName) {
        field.Name = "s_ImageName";
        field.Type = TType.String;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(S_ImageName);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Item(");
      sb.Append("I_ItemId: ");
      sb.Append(I_ItemId);
      sb.Append(",S_ItemName: ");
      sb.Append(S_ItemName);
      sb.Append(",S_ItemKind: ");
      sb.Append(S_ItemKind);
      sb.Append(",S_ItemGrade: ");
      sb.Append(S_ItemGrade);
      sb.Append(",S_ItemDescription: ");
      sb.Append(S_ItemDescription);
      sb.Append(",S_SlotPosition: ");
      sb.Append(S_SlotPosition);
      sb.Append(",B_IsShow: ");
      sb.Append(B_IsShow);
      sb.Append(",I_Priority: ");
      sb.Append(I_Priority);
      sb.Append(",I_ItemEffectQuantity: ");
      sb.Append(I_ItemEffectQuantity);
      sb.Append(",I_SalePrice: ");
      sb.Append(I_SalePrice);
      sb.Append(",S_UseItemKind: ");
      sb.Append(S_UseItemKind);
      sb.Append(",S_MoneyKind: ");
      sb.Append(S_MoneyKind);
      sb.Append(",S_BindYN: ");
      sb.Append(S_BindYN);
      sb.Append(",I_BindID: ");
      sb.Append(I_BindID);
      sb.Append(",S_ImageName: ");
      sb.Append(S_ImageName);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
