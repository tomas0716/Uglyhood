/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace sg.protocol.user
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UserUnit : TBase
  {
    private int _i_Seq;
    private int _i_UnitId;
    private int _i_UnitLevel;
    private int _i_SkillLevel;
    private int _i_UnitCombat;
    private int _i_UnitMaxHp;
    private int _i_UnitMaxSp;
    private int _i_UnitChargePerBlock;
    private int _i_UnitAttack;
    private int _i_UnitPassiveSkillLevel;
    private int _i_UnitAddTime;

    public int I_Seq
    {
      get
      {
        return _i_Seq;
      }
      set
      {
        __isset.i_Seq = true;
        this._i_Seq = value;
      }
    }

    public int I_UnitId
    {
      get
      {
        return _i_UnitId;
      }
      set
      {
        __isset.i_UnitId = true;
        this._i_UnitId = value;
      }
    }

    public int I_UnitLevel
    {
      get
      {
        return _i_UnitLevel;
      }
      set
      {
        __isset.i_UnitLevel = true;
        this._i_UnitLevel = value;
      }
    }

    public int I_SkillLevel
    {
      get
      {
        return _i_SkillLevel;
      }
      set
      {
        __isset.i_SkillLevel = true;
        this._i_SkillLevel = value;
      }
    }

    public int I_UnitCombat
    {
      get
      {
        return _i_UnitCombat;
      }
      set
      {
        __isset.i_UnitCombat = true;
        this._i_UnitCombat = value;
      }
    }

    public int I_UnitMaxHp
    {
      get
      {
        return _i_UnitMaxHp;
      }
      set
      {
        __isset.i_UnitMaxHp = true;
        this._i_UnitMaxHp = value;
      }
    }

    public int I_UnitMaxSp
    {
      get
      {
        return _i_UnitMaxSp;
      }
      set
      {
        __isset.i_UnitMaxSp = true;
        this._i_UnitMaxSp = value;
      }
    }

    public int I_UnitChargePerBlock
    {
      get
      {
        return _i_UnitChargePerBlock;
      }
      set
      {
        __isset.i_UnitChargePerBlock = true;
        this._i_UnitChargePerBlock = value;
      }
    }

    public int I_UnitAttack
    {
      get
      {
        return _i_UnitAttack;
      }
      set
      {
        __isset.i_UnitAttack = true;
        this._i_UnitAttack = value;
      }
    }

    public int I_UnitPassiveSkillLevel
    {
      get
      {
        return _i_UnitPassiveSkillLevel;
      }
      set
      {
        __isset.i_UnitPassiveSkillLevel = true;
        this._i_UnitPassiveSkillLevel = value;
      }
    }

    public int I_UnitAddTime
    {
      get
      {
        return _i_UnitAddTime;
      }
      set
      {
        __isset.i_UnitAddTime = true;
        this._i_UnitAddTime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool i_Seq;
      public bool i_UnitId;
      public bool i_UnitLevel;
      public bool i_SkillLevel;
      public bool i_UnitCombat;
      public bool i_UnitMaxHp;
      public bool i_UnitMaxSp;
      public bool i_UnitChargePerBlock;
      public bool i_UnitAttack;
      public bool i_UnitPassiveSkillLevel;
      public bool i_UnitAddTime;
    }

    public UserUnit() {
      this._i_Seq = 0;
      this.__isset.i_Seq = true;
      this._i_UnitId = 0;
      this.__isset.i_UnitId = true;
      this._i_UnitLevel = 0;
      this.__isset.i_UnitLevel = true;
      this._i_SkillLevel = 0;
      this.__isset.i_SkillLevel = true;
      this._i_UnitCombat = 0;
      this.__isset.i_UnitCombat = true;
      this._i_UnitMaxHp = 0;
      this.__isset.i_UnitMaxHp = true;
      this._i_UnitMaxSp = 0;
      this.__isset.i_UnitMaxSp = true;
      this._i_UnitChargePerBlock = 0;
      this.__isset.i_UnitChargePerBlock = true;
      this._i_UnitAttack = 0;
      this.__isset.i_UnitAttack = true;
      this._i_UnitPassiveSkillLevel = 0;
      this.__isset.i_UnitPassiveSkillLevel = true;
      this._i_UnitAddTime = 0;
      this.__isset.i_UnitAddTime = true;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              I_Seq = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              I_UnitId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              I_UnitLevel = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              I_SkillLevel = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              I_UnitCombat = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              I_UnitMaxHp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              I_UnitMaxSp = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              I_UnitChargePerBlock = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              I_UnitAttack = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              I_UnitPassiveSkillLevel = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              I_UnitAddTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("UserUnit");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.i_Seq) {
        field.Name = "i_Seq";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_Seq);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_UnitId) {
        field.Name = "i_UnitId";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_UnitId);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_UnitLevel) {
        field.Name = "i_UnitLevel";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_UnitLevel);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_SkillLevel) {
        field.Name = "i_SkillLevel";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_SkillLevel);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_UnitCombat) {
        field.Name = "i_UnitCombat";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_UnitCombat);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_UnitMaxHp) {
        field.Name = "i_UnitMaxHp";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_UnitMaxHp);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_UnitMaxSp) {
        field.Name = "i_UnitMaxSp";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_UnitMaxSp);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_UnitChargePerBlock) {
        field.Name = "i_UnitChargePerBlock";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_UnitChargePerBlock);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_UnitAttack) {
        field.Name = "i_UnitAttack";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_UnitAttack);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_UnitPassiveSkillLevel) {
        field.Name = "i_UnitPassiveSkillLevel";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_UnitPassiveSkillLevel);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_UnitAddTime) {
        field.Name = "i_UnitAddTime";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_UnitAddTime);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("UserUnit(");
      sb.Append("I_Seq: ");
      sb.Append(I_Seq);
      sb.Append(",I_UnitId: ");
      sb.Append(I_UnitId);
      sb.Append(",I_UnitLevel: ");
      sb.Append(I_UnitLevel);
      sb.Append(",I_SkillLevel: ");
      sb.Append(I_SkillLevel);
      sb.Append(",I_UnitCombat: ");
      sb.Append(I_UnitCombat);
      sb.Append(",I_UnitMaxHp: ");
      sb.Append(I_UnitMaxHp);
      sb.Append(",I_UnitMaxSp: ");
      sb.Append(I_UnitMaxSp);
      sb.Append(",I_UnitChargePerBlock: ");
      sb.Append(I_UnitChargePerBlock);
      sb.Append(",I_UnitAttack: ");
      sb.Append(I_UnitAttack);
      sb.Append(",I_UnitPassiveSkillLevel: ");
      sb.Append(I_UnitPassiveSkillLevel);
      sb.Append(",I_UnitAddTime: ");
      sb.Append(I_UnitAddTime);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
