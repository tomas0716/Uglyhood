/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace sg.protocol.user
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Post : TBase
  {
    private int _i_PostSeq;
    private string _s_SendName;
    private int _i_PostKind;
    private string _s_Title;
    private int _i_ContentsId;
    private string _s_Contents;
    private PostReward _st_PostReward;
    private bool _b_IsNew;
    private int _i_IsReward;
    private int _i_DelLimit;

    public int I_PostSeq
    {
      get
      {
        return _i_PostSeq;
      }
      set
      {
        __isset.i_PostSeq = true;
        this._i_PostSeq = value;
      }
    }

    public string S_SendName
    {
      get
      {
        return _s_SendName;
      }
      set
      {
        __isset.s_SendName = true;
        this._s_SendName = value;
      }
    }

    public int I_PostKind
    {
      get
      {
        return _i_PostKind;
      }
      set
      {
        __isset.i_PostKind = true;
        this._i_PostKind = value;
      }
    }

    public string S_Title
    {
      get
      {
        return _s_Title;
      }
      set
      {
        __isset.s_Title = true;
        this._s_Title = value;
      }
    }

    public int I_ContentsId
    {
      get
      {
        return _i_ContentsId;
      }
      set
      {
        __isset.i_ContentsId = true;
        this._i_ContentsId = value;
      }
    }

    public string S_Contents
    {
      get
      {
        return _s_Contents;
      }
      set
      {
        __isset.s_Contents = true;
        this._s_Contents = value;
      }
    }

    public PostReward St_PostReward
    {
      get
      {
        return _st_PostReward;
      }
      set
      {
        __isset.st_PostReward = true;
        this._st_PostReward = value;
      }
    }

    public bool B_IsNew
    {
      get
      {
        return _b_IsNew;
      }
      set
      {
        __isset.b_IsNew = true;
        this._b_IsNew = value;
      }
    }

    public int I_IsReward
    {
      get
      {
        return _i_IsReward;
      }
      set
      {
        __isset.i_IsReward = true;
        this._i_IsReward = value;
      }
    }

    public int I_DelLimit
    {
      get
      {
        return _i_DelLimit;
      }
      set
      {
        __isset.i_DelLimit = true;
        this._i_DelLimit = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool i_PostSeq;
      public bool s_SendName;
      public bool i_PostKind;
      public bool s_Title;
      public bool i_ContentsId;
      public bool s_Contents;
      public bool st_PostReward;
      public bool b_IsNew;
      public bool i_IsReward;
      public bool i_DelLimit;
    }

    public Post() {
      this._i_PostSeq = 0;
      this.__isset.i_PostSeq = true;
      this._i_PostKind = 0;
      this.__isset.i_PostKind = true;
      this._s_Title = "";
      this.__isset.s_Title = true;
      this._i_ContentsId = 0;
      this.__isset.i_ContentsId = true;
      this._s_Contents = "";
      this.__isset.s_Contents = true;
      this._b_IsNew = false;
      this.__isset.b_IsNew = true;
      this._i_IsReward = 0;
      this.__isset.i_IsReward = true;
      this._i_DelLimit = 0;
      this.__isset.i_DelLimit = true;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              I_PostSeq = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              S_SendName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              I_PostKind = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              S_Title = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              I_ContentsId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              S_Contents = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Struct) {
              St_PostReward = new PostReward();
              St_PostReward.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Bool) {
              B_IsNew = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              I_IsReward = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              I_DelLimit = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Post");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.i_PostSeq) {
        field.Name = "i_PostSeq";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_PostSeq);
        oprot.WriteFieldEnd();
      }
      if (S_SendName != null && __isset.s_SendName) {
        field.Name = "s_SendName";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(S_SendName);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_PostKind) {
        field.Name = "i_PostKind";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_PostKind);
        oprot.WriteFieldEnd();
      }
      if (S_Title != null && __isset.s_Title) {
        field.Name = "s_Title";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(S_Title);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_ContentsId) {
        field.Name = "i_ContentsId";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_ContentsId);
        oprot.WriteFieldEnd();
      }
      if (S_Contents != null && __isset.s_Contents) {
        field.Name = "s_Contents";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(S_Contents);
        oprot.WriteFieldEnd();
      }
      if (St_PostReward != null && __isset.st_PostReward) {
        field.Name = "st_PostReward";
        field.Type = TType.Struct;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        St_PostReward.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.b_IsNew) {
        field.Name = "b_IsNew";
        field.Type = TType.Bool;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(B_IsNew);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_IsReward) {
        field.Name = "i_IsReward";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_IsReward);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_DelLimit) {
        field.Name = "i_DelLimit";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_DelLimit);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Post(");
      sb.Append("I_PostSeq: ");
      sb.Append(I_PostSeq);
      sb.Append(",S_SendName: ");
      sb.Append(S_SendName);
      sb.Append(",I_PostKind: ");
      sb.Append(I_PostKind);
      sb.Append(",S_Title: ");
      sb.Append(S_Title);
      sb.Append(",I_ContentsId: ");
      sb.Append(I_ContentsId);
      sb.Append(",S_Contents: ");
      sb.Append(S_Contents);
      sb.Append(",St_PostReward: ");
      sb.Append(St_PostReward== null ? "<null>" : St_PostReward.ToString());
      sb.Append(",B_IsNew: ");
      sb.Append(B_IsNew);
      sb.Append(",I_IsReward: ");
      sb.Append(I_IsReward);
      sb.Append(",I_DelLimit: ");
      sb.Append(I_DelLimit);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
