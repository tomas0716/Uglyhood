/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace sg.protocol.user
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UserAssets : TBase
  {
    private int _i_TotalGem;
    private int _i_PurchaseGem;
    private int _i_FreeGem;
    private int _i_Gold;
    private int _i_Ap;
    private int _i_ApChargeTime;
    private int _i_ApMax;
    private int _i_ApChargeTerm;

    public int I_TotalGem
    {
      get
      {
        return _i_TotalGem;
      }
      set
      {
        __isset.i_TotalGem = true;
        this._i_TotalGem = value;
      }
    }

    public int I_PurchaseGem
    {
      get
      {
        return _i_PurchaseGem;
      }
      set
      {
        __isset.i_PurchaseGem = true;
        this._i_PurchaseGem = value;
      }
    }

    public int I_FreeGem
    {
      get
      {
        return _i_FreeGem;
      }
      set
      {
        __isset.i_FreeGem = true;
        this._i_FreeGem = value;
      }
    }

    public int I_Gold
    {
      get
      {
        return _i_Gold;
      }
      set
      {
        __isset.i_Gold = true;
        this._i_Gold = value;
      }
    }

    public int I_Ap
    {
      get
      {
        return _i_Ap;
      }
      set
      {
        __isset.i_Ap = true;
        this._i_Ap = value;
      }
    }

    public int I_ApChargeTime
    {
      get
      {
        return _i_ApChargeTime;
      }
      set
      {
        __isset.i_ApChargeTime = true;
        this._i_ApChargeTime = value;
      }
    }

    public int I_ApMax
    {
      get
      {
        return _i_ApMax;
      }
      set
      {
        __isset.i_ApMax = true;
        this._i_ApMax = value;
      }
    }

    public int I_ApChargeTerm
    {
      get
      {
        return _i_ApChargeTerm;
      }
      set
      {
        __isset.i_ApChargeTerm = true;
        this._i_ApChargeTerm = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool i_TotalGem;
      public bool i_PurchaseGem;
      public bool i_FreeGem;
      public bool i_Gold;
      public bool i_Ap;
      public bool i_ApChargeTime;
      public bool i_ApMax;
      public bool i_ApChargeTerm;
    }

    public UserAssets() {
      this._i_TotalGem = 0;
      this.__isset.i_TotalGem = true;
      this._i_PurchaseGem = 0;
      this.__isset.i_PurchaseGem = true;
      this._i_FreeGem = 0;
      this.__isset.i_FreeGem = true;
      this._i_Gold = 0;
      this.__isset.i_Gold = true;
      this._i_Ap = 0;
      this.__isset.i_Ap = true;
      this._i_ApChargeTime = 0;
      this.__isset.i_ApChargeTime = true;
      this._i_ApMax = 0;
      this.__isset.i_ApMax = true;
      this._i_ApChargeTerm = 0;
      this.__isset.i_ApChargeTerm = true;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              I_TotalGem = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              I_PurchaseGem = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              I_FreeGem = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              I_Gold = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              I_Ap = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              I_ApChargeTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              I_ApMax = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              I_ApChargeTerm = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("UserAssets");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.i_TotalGem) {
        field.Name = "i_TotalGem";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_TotalGem);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_PurchaseGem) {
        field.Name = "i_PurchaseGem";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_PurchaseGem);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_FreeGem) {
        field.Name = "i_FreeGem";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_FreeGem);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_Gold) {
        field.Name = "i_Gold";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_Gold);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_Ap) {
        field.Name = "i_Ap";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_Ap);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_ApChargeTime) {
        field.Name = "i_ApChargeTime";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_ApChargeTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_ApMax) {
        field.Name = "i_ApMax";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_ApMax);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_ApChargeTerm) {
        field.Name = "i_ApChargeTerm";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_ApChargeTerm);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("UserAssets(");
      sb.Append("I_TotalGem: ");
      sb.Append(I_TotalGem);
      sb.Append(",I_PurchaseGem: ");
      sb.Append(I_PurchaseGem);
      sb.Append(",I_FreeGem: ");
      sb.Append(I_FreeGem);
      sb.Append(",I_Gold: ");
      sb.Append(I_Gold);
      sb.Append(",I_Ap: ");
      sb.Append(I_Ap);
      sb.Append(",I_ApChargeTime: ");
      sb.Append(I_ApChargeTime);
      sb.Append(",I_ApMax: ");
      sb.Append(I_ApMax);
      sb.Append(",I_ApChargeTerm: ");
      sb.Append(I_ApChargeTerm);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
