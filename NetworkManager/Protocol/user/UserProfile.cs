/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace sg.protocol.user
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UserProfile : TBase
  {
    private int _i_Profile;
    private int _i_CharCount;
    private int _i_TeamRank;
    private int _i_TeamPoint;
    private int _i_MaxPlayChar;
    private int _i_MaxCombo;
    private int _i_NowDeckId;

    public int I_Profile
    {
      get
      {
        return _i_Profile;
      }
      set
      {
        __isset.i_Profile = true;
        this._i_Profile = value;
      }
    }

    public int I_CharCount
    {
      get
      {
        return _i_CharCount;
      }
      set
      {
        __isset.i_CharCount = true;
        this._i_CharCount = value;
      }
    }

    public int I_TeamRank
    {
      get
      {
        return _i_TeamRank;
      }
      set
      {
        __isset.i_TeamRank = true;
        this._i_TeamRank = value;
      }
    }

    public int I_TeamPoint
    {
      get
      {
        return _i_TeamPoint;
      }
      set
      {
        __isset.i_TeamPoint = true;
        this._i_TeamPoint = value;
      }
    }

    public int I_MaxPlayChar
    {
      get
      {
        return _i_MaxPlayChar;
      }
      set
      {
        __isset.i_MaxPlayChar = true;
        this._i_MaxPlayChar = value;
      }
    }

    public int I_MaxCombo
    {
      get
      {
        return _i_MaxCombo;
      }
      set
      {
        __isset.i_MaxCombo = true;
        this._i_MaxCombo = value;
      }
    }

    public int I_NowDeckId
    {
      get
      {
        return _i_NowDeckId;
      }
      set
      {
        __isset.i_NowDeckId = true;
        this._i_NowDeckId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool i_Profile;
      public bool i_CharCount;
      public bool i_TeamRank;
      public bool i_TeamPoint;
      public bool i_MaxPlayChar;
      public bool i_MaxCombo;
      public bool i_NowDeckId;
    }

    public UserProfile() {
      this._i_Profile = 0;
      this.__isset.i_Profile = true;
      this._i_CharCount = 0;
      this.__isset.i_CharCount = true;
      this._i_TeamRank = 0;
      this.__isset.i_TeamRank = true;
      this._i_TeamPoint = 0;
      this.__isset.i_TeamPoint = true;
      this._i_MaxPlayChar = 0;
      this.__isset.i_MaxPlayChar = true;
      this._i_MaxCombo = 0;
      this.__isset.i_MaxCombo = true;
      this._i_NowDeckId = 0;
      this.__isset.i_NowDeckId = true;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              I_Profile = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              I_CharCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              I_TeamRank = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              I_TeamPoint = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              I_MaxPlayChar = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              I_MaxCombo = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              I_NowDeckId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("UserProfile");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.i_Profile) {
        field.Name = "i_Profile";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_Profile);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_CharCount) {
        field.Name = "i_CharCount";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_CharCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_TeamRank) {
        field.Name = "i_TeamRank";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_TeamRank);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_TeamPoint) {
        field.Name = "i_TeamPoint";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_TeamPoint);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_MaxPlayChar) {
        field.Name = "i_MaxPlayChar";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_MaxPlayChar);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_MaxCombo) {
        field.Name = "i_MaxCombo";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_MaxCombo);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_NowDeckId) {
        field.Name = "i_NowDeckId";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_NowDeckId);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("UserProfile(");
      sb.Append("I_Profile: ");
      sb.Append(I_Profile);
      sb.Append(",I_CharCount: ");
      sb.Append(I_CharCount);
      sb.Append(",I_TeamRank: ");
      sb.Append(I_TeamRank);
      sb.Append(",I_TeamPoint: ");
      sb.Append(I_TeamPoint);
      sb.Append(",I_MaxPlayChar: ");
      sb.Append(I_MaxPlayChar);
      sb.Append(",I_MaxCombo: ");
      sb.Append(I_MaxCombo);
      sb.Append(",I_NowDeckId: ");
      sb.Append(I_NowDeckId);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
