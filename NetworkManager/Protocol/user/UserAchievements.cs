/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace sg.protocol.user
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UserAchievements : TBase
  {
    private int _i_AchievementsSeq;
    private int _i_AchievementsId;
    private int _i_AchievementsNum;
    private int _i_UserCount;
    private int _i_AchievementsLevel;
    private bool _b_IsReward1;
    private bool _b_IsReward2;
    private bool _b_IsReward3;
    private int _i_priority;
    private string _s_AchievementsType;
    private int _i_Condition;

    public int I_AchievementsSeq
    {
      get
      {
        return _i_AchievementsSeq;
      }
      set
      {
        __isset.i_AchievementsSeq = true;
        this._i_AchievementsSeq = value;
      }
    }

    public int I_AchievementsId
    {
      get
      {
        return _i_AchievementsId;
      }
      set
      {
        __isset.i_AchievementsId = true;
        this._i_AchievementsId = value;
      }
    }

    public int I_AchievementsNum
    {
      get
      {
        return _i_AchievementsNum;
      }
      set
      {
        __isset.i_AchievementsNum = true;
        this._i_AchievementsNum = value;
      }
    }

    public int I_UserCount
    {
      get
      {
        return _i_UserCount;
      }
      set
      {
        __isset.i_UserCount = true;
        this._i_UserCount = value;
      }
    }

    public int I_AchievementsLevel
    {
      get
      {
        return _i_AchievementsLevel;
      }
      set
      {
        __isset.i_AchievementsLevel = true;
        this._i_AchievementsLevel = value;
      }
    }

    public bool B_IsReward1
    {
      get
      {
        return _b_IsReward1;
      }
      set
      {
        __isset.b_IsReward1 = true;
        this._b_IsReward1 = value;
      }
    }

    public bool B_IsReward2
    {
      get
      {
        return _b_IsReward2;
      }
      set
      {
        __isset.b_IsReward2 = true;
        this._b_IsReward2 = value;
      }
    }

    public bool B_IsReward3
    {
      get
      {
        return _b_IsReward3;
      }
      set
      {
        __isset.b_IsReward3 = true;
        this._b_IsReward3 = value;
      }
    }

    public int I_priority
    {
      get
      {
        return _i_priority;
      }
      set
      {
        __isset.i_priority = true;
        this._i_priority = value;
      }
    }

    public string S_AchievementsType
    {
      get
      {
        return _s_AchievementsType;
      }
      set
      {
        __isset.s_AchievementsType = true;
        this._s_AchievementsType = value;
      }
    }

    public int I_Condition
    {
      get
      {
        return _i_Condition;
      }
      set
      {
        __isset.i_Condition = true;
        this._i_Condition = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool i_AchievementsSeq;
      public bool i_AchievementsId;
      public bool i_AchievementsNum;
      public bool i_UserCount;
      public bool i_AchievementsLevel;
      public bool b_IsReward1;
      public bool b_IsReward2;
      public bool b_IsReward3;
      public bool i_priority;
      public bool s_AchievementsType;
      public bool i_Condition;
    }

    public UserAchievements() {
      this._i_AchievementsSeq = 0;
      this.__isset.i_AchievementsSeq = true;
      this._i_AchievementsId = 0;
      this.__isset.i_AchievementsId = true;
      this._i_AchievementsNum = 0;
      this.__isset.i_AchievementsNum = true;
      this._i_UserCount = 0;
      this.__isset.i_UserCount = true;
      this._i_AchievementsLevel = 0;
      this.__isset.i_AchievementsLevel = true;
      this._b_IsReward1 = false;
      this.__isset.b_IsReward1 = true;
      this._b_IsReward2 = false;
      this.__isset.b_IsReward2 = true;
      this._b_IsReward3 = false;
      this.__isset.b_IsReward3 = true;
      this._i_priority = 0;
      this.__isset.i_priority = true;
      this._s_AchievementsType = "None";
      this.__isset.s_AchievementsType = true;
      this._i_Condition = 0;
      this.__isset.i_Condition = true;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              I_AchievementsSeq = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              I_AchievementsId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              I_AchievementsNum = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              I_UserCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              I_AchievementsLevel = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Bool) {
              B_IsReward1 = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Bool) {
              B_IsReward2 = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Bool) {
              B_IsReward3 = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              I_priority = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              S_AchievementsType = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              I_Condition = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("UserAchievements");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.i_AchievementsSeq) {
        field.Name = "i_AchievementsSeq";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_AchievementsSeq);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_AchievementsId) {
        field.Name = "i_AchievementsId";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_AchievementsId);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_AchievementsNum) {
        field.Name = "i_AchievementsNum";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_AchievementsNum);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_UserCount) {
        field.Name = "i_UserCount";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_UserCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_AchievementsLevel) {
        field.Name = "i_AchievementsLevel";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_AchievementsLevel);
        oprot.WriteFieldEnd();
      }
      if (__isset.b_IsReward1) {
        field.Name = "b_IsReward1";
        field.Type = TType.Bool;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(B_IsReward1);
        oprot.WriteFieldEnd();
      }
      if (__isset.b_IsReward2) {
        field.Name = "b_IsReward2";
        field.Type = TType.Bool;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(B_IsReward2);
        oprot.WriteFieldEnd();
      }
      if (__isset.b_IsReward3) {
        field.Name = "b_IsReward3";
        field.Type = TType.Bool;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(B_IsReward3);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_priority) {
        field.Name = "i_priority";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_priority);
        oprot.WriteFieldEnd();
      }
      if (S_AchievementsType != null && __isset.s_AchievementsType) {
        field.Name = "s_AchievementsType";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(S_AchievementsType);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_Condition) {
        field.Name = "i_Condition";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_Condition);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("UserAchievements(");
      sb.Append("I_AchievementsSeq: ");
      sb.Append(I_AchievementsSeq);
      sb.Append(",I_AchievementsId: ");
      sb.Append(I_AchievementsId);
      sb.Append(",I_AchievementsNum: ");
      sb.Append(I_AchievementsNum);
      sb.Append(",I_UserCount: ");
      sb.Append(I_UserCount);
      sb.Append(",I_AchievementsLevel: ");
      sb.Append(I_AchievementsLevel);
      sb.Append(",B_IsReward1: ");
      sb.Append(B_IsReward1);
      sb.Append(",B_IsReward2: ");
      sb.Append(B_IsReward2);
      sb.Append(",B_IsReward3: ");
      sb.Append(B_IsReward3);
      sb.Append(",I_priority: ");
      sb.Append(I_priority);
      sb.Append(",S_AchievementsType: ");
      sb.Append(S_AchievementsType);
      sb.Append(",I_Condition: ");
      sb.Append(I_Condition);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
