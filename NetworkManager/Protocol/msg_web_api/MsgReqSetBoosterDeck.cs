/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace sg.protocol.msg_web_api
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MsgReqSetBoosterDeck : TBase
  {
    private long _uid;
    private int _i_DeckId;
    private int _i_Slot0BoosterId;
    private int _i_Slot1BoosterId;
    private int _i_Slot2BoosterId;
    private string _s_DeckName;

    public long Uid
    {
      get
      {
        return _uid;
      }
      set
      {
        __isset.uid = true;
        this._uid = value;
      }
    }

    public int I_DeckId
    {
      get
      {
        return _i_DeckId;
      }
      set
      {
        __isset.i_DeckId = true;
        this._i_DeckId = value;
      }
    }

    public int I_Slot0BoosterId
    {
      get
      {
        return _i_Slot0BoosterId;
      }
      set
      {
        __isset.i_Slot0BoosterId = true;
        this._i_Slot0BoosterId = value;
      }
    }

    public int I_Slot1BoosterId
    {
      get
      {
        return _i_Slot1BoosterId;
      }
      set
      {
        __isset.i_Slot1BoosterId = true;
        this._i_Slot1BoosterId = value;
      }
    }

    public int I_Slot2BoosterId
    {
      get
      {
        return _i_Slot2BoosterId;
      }
      set
      {
        __isset.i_Slot2BoosterId = true;
        this._i_Slot2BoosterId = value;
      }
    }

    public string S_DeckName
    {
      get
      {
        return _s_DeckName;
      }
      set
      {
        __isset.s_DeckName = true;
        this._s_DeckName = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool uid;
      public bool i_DeckId;
      public bool i_Slot0BoosterId;
      public bool i_Slot1BoosterId;
      public bool i_Slot2BoosterId;
      public bool s_DeckName;
    }

    public MsgReqSetBoosterDeck() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Uid = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              I_DeckId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              I_Slot0BoosterId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              I_Slot1BoosterId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              I_Slot2BoosterId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              S_DeckName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("MsgReqSetBoosterDeck");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.uid) {
        field.Name = "uid";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Uid);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_DeckId) {
        field.Name = "i_DeckId";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_DeckId);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_Slot0BoosterId) {
        field.Name = "i_Slot0BoosterId";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_Slot0BoosterId);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_Slot1BoosterId) {
        field.Name = "i_Slot1BoosterId";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_Slot1BoosterId);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_Slot2BoosterId) {
        field.Name = "i_Slot2BoosterId";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_Slot2BoosterId);
        oprot.WriteFieldEnd();
      }
      if (S_DeckName != null && __isset.s_DeckName) {
        field.Name = "s_DeckName";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(S_DeckName);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("MsgReqSetBoosterDeck(");
      sb.Append("Uid: ");
      sb.Append(Uid);
      sb.Append(",I_DeckId: ");
      sb.Append(I_DeckId);
      sb.Append(",I_Slot0BoosterId: ");
      sb.Append(I_Slot0BoosterId);
      sb.Append(",I_Slot1BoosterId: ");
      sb.Append(I_Slot1BoosterId);
      sb.Append(",I_Slot2BoosterId: ");
      sb.Append(I_Slot2BoosterId);
      sb.Append(",S_DeckName: ");
      sb.Append(S_DeckName);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
