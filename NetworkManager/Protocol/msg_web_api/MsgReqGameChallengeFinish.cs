/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace sg.protocol.msg_web_api
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MsgReqGameChallengeFinish : TBase
  {
    private long _uid;
    private int _i_EpisodeId;
    private int _i_ChapterId;
    private int _i_StageId;
    private int _i_IsClear;
    private int _i_DestroyColonyCount;
    private int _i_MaxComboCount;
    private int _i_IsMissionClear_1;
    private int _i_IsMissionClear_2;
    private int _i_IsMissionClear_3;

    public long Uid
    {
      get
      {
        return _uid;
      }
      set
      {
        __isset.uid = true;
        this._uid = value;
      }
    }

    public int I_EpisodeId
    {
      get
      {
        return _i_EpisodeId;
      }
      set
      {
        __isset.i_EpisodeId = true;
        this._i_EpisodeId = value;
      }
    }

    public int I_ChapterId
    {
      get
      {
        return _i_ChapterId;
      }
      set
      {
        __isset.i_ChapterId = true;
        this._i_ChapterId = value;
      }
    }

    public int I_StageId
    {
      get
      {
        return _i_StageId;
      }
      set
      {
        __isset.i_StageId = true;
        this._i_StageId = value;
      }
    }

    public int I_IsClear
    {
      get
      {
        return _i_IsClear;
      }
      set
      {
        __isset.i_IsClear = true;
        this._i_IsClear = value;
      }
    }

    public int I_DestroyColonyCount
    {
      get
      {
        return _i_DestroyColonyCount;
      }
      set
      {
        __isset.i_DestroyColonyCount = true;
        this._i_DestroyColonyCount = value;
      }
    }

    public int I_MaxComboCount
    {
      get
      {
        return _i_MaxComboCount;
      }
      set
      {
        __isset.i_MaxComboCount = true;
        this._i_MaxComboCount = value;
      }
    }

    public int I_IsMissionClear_1
    {
      get
      {
        return _i_IsMissionClear_1;
      }
      set
      {
        __isset.i_IsMissionClear_1 = true;
        this._i_IsMissionClear_1 = value;
      }
    }

    public int I_IsMissionClear_2
    {
      get
      {
        return _i_IsMissionClear_2;
      }
      set
      {
        __isset.i_IsMissionClear_2 = true;
        this._i_IsMissionClear_2 = value;
      }
    }

    public int I_IsMissionClear_3
    {
      get
      {
        return _i_IsMissionClear_3;
      }
      set
      {
        __isset.i_IsMissionClear_3 = true;
        this._i_IsMissionClear_3 = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool uid;
      public bool i_EpisodeId;
      public bool i_ChapterId;
      public bool i_StageId;
      public bool i_IsClear;
      public bool i_DestroyColonyCount;
      public bool i_MaxComboCount;
      public bool i_IsMissionClear_1;
      public bool i_IsMissionClear_2;
      public bool i_IsMissionClear_3;
    }

    public MsgReqGameChallengeFinish() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Uid = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              I_EpisodeId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              I_ChapterId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              I_StageId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              I_IsClear = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              I_DestroyColonyCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              I_MaxComboCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              I_IsMissionClear_1 = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              I_IsMissionClear_2 = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              I_IsMissionClear_3 = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("MsgReqGameChallengeFinish");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.uid) {
        field.Name = "uid";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Uid);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_EpisodeId) {
        field.Name = "i_EpisodeId";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_EpisodeId);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_ChapterId) {
        field.Name = "i_ChapterId";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_ChapterId);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_StageId) {
        field.Name = "i_StageId";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_StageId);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_IsClear) {
        field.Name = "i_IsClear";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_IsClear);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_DestroyColonyCount) {
        field.Name = "i_DestroyColonyCount";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_DestroyColonyCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_MaxComboCount) {
        field.Name = "i_MaxComboCount";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_MaxComboCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_IsMissionClear_1) {
        field.Name = "i_IsMissionClear_1";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_IsMissionClear_1);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_IsMissionClear_2) {
        field.Name = "i_IsMissionClear_2";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_IsMissionClear_2);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_IsMissionClear_3) {
        field.Name = "i_IsMissionClear_3";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_IsMissionClear_3);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("MsgReqGameChallengeFinish(");
      sb.Append("Uid: ");
      sb.Append(Uid);
      sb.Append(",I_EpisodeId: ");
      sb.Append(I_EpisodeId);
      sb.Append(",I_ChapterId: ");
      sb.Append(I_ChapterId);
      sb.Append(",I_StageId: ");
      sb.Append(I_StageId);
      sb.Append(",I_IsClear: ");
      sb.Append(I_IsClear);
      sb.Append(",I_DestroyColonyCount: ");
      sb.Append(I_DestroyColonyCount);
      sb.Append(",I_MaxComboCount: ");
      sb.Append(I_MaxComboCount);
      sb.Append(",I_IsMissionClear_1: ");
      sb.Append(I_IsMissionClear_1);
      sb.Append(",I_IsMissionClear_2: ");
      sb.Append(I_IsMissionClear_2);
      sb.Append(",I_IsMissionClear_3: ");
      sb.Append(I_IsMissionClear_3);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
