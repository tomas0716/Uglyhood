/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace sg.protocol.msg_web_api
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MsgAnsLogin : TBase
  {
    private sg.protocol.basic.Error _error;
    private sg.protocol.user.UserInfoBasic _user;
    private string _s_AccessToken;
    private bool _b_Merger;
    private bool _b_Block;
    private int _i_ServerTime;

    public sg.protocol.basic.Error Error
    {
      get
      {
        return _error;
      }
      set
      {
        __isset.error = true;
        this._error = value;
      }
    }

    public sg.protocol.user.UserInfoBasic User
    {
      get
      {
        return _user;
      }
      set
      {
        __isset.user = true;
        this._user = value;
      }
    }

    public string S_AccessToken
    {
      get
      {
        return _s_AccessToken;
      }
      set
      {
        __isset.s_AccessToken = true;
        this._s_AccessToken = value;
      }
    }

    public bool B_Merger
    {
      get
      {
        return _b_Merger;
      }
      set
      {
        __isset.b_Merger = true;
        this._b_Merger = value;
      }
    }

    public bool B_Block
    {
      get
      {
        return _b_Block;
      }
      set
      {
        __isset.b_Block = true;
        this._b_Block = value;
      }
    }

    public int I_ServerTime
    {
      get
      {
        return _i_ServerTime;
      }
      set
      {
        __isset.i_ServerTime = true;
        this._i_ServerTime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool error;
      public bool user;
      public bool s_AccessToken;
      public bool b_Merger;
      public bool b_Block;
      public bool i_ServerTime;
    }

    public MsgAnsLogin() {
      this._i_ServerTime = 0;
      this.__isset.i_ServerTime = true;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Error = new sg.protocol.basic.Error();
              Error.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              User = new sg.protocol.user.UserInfoBasic();
              User.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              S_AccessToken = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Bool) {
              B_Merger = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Bool) {
              B_Block = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              I_ServerTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("MsgAnsLogin");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Error != null && __isset.error) {
        field.Name = "error";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        Error.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (User != null && __isset.user) {
        field.Name = "user";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        User.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (S_AccessToken != null && __isset.s_AccessToken) {
        field.Name = "s_AccessToken";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(S_AccessToken);
        oprot.WriteFieldEnd();
      }
      if (__isset.b_Merger) {
        field.Name = "b_Merger";
        field.Type = TType.Bool;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(B_Merger);
        oprot.WriteFieldEnd();
      }
      if (__isset.b_Block) {
        field.Name = "b_Block";
        field.Type = TType.Bool;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(B_Block);
        oprot.WriteFieldEnd();
      }
      if (__isset.i_ServerTime) {
        field.Name = "i_ServerTime";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(I_ServerTime);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("MsgAnsLogin(");
      sb.Append("Error: ");
      sb.Append(Error== null ? "<null>" : Error.ToString());
      sb.Append(",User: ");
      sb.Append(User== null ? "<null>" : User.ToString());
      sb.Append(",S_AccessToken: ");
      sb.Append(S_AccessToken);
      sb.Append(",B_Merger: ");
      sb.Append(B_Merger);
      sb.Append(",B_Block: ");
      sb.Append(B_Block);
      sb.Append(",I_ServerTime: ");
      sb.Append(I_ServerTime);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
